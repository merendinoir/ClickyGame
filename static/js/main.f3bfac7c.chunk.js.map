{"version":3,"sources":["Components/row/row.js","Components/BottomBar/BottomBar.js","App.js","serviceWorker.js","index.js"],"names":["Row","card","react_default","a","createElement","Card","raised","key","id","className","src","concat","image","alt","name","onClick","handleClick","BottomBar","props","BottomNavigation","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","shuffle","c","state","cards","i","length","j","Math","floor","random","_ref","setState","toConsumableArray","findId","clicked","find","elem","returnFirstNull","indexOf","insertId","index","map","emptyClicked","Array","fill","resetScoreZero","score","incrementBothScores","topScore","incrementScore","event","target","undefined","alert","images","_this2","Fragment","AppBar","position","color","row_row","assign","Components_BottomBar_BottomBar","style","background","marginTop","paddingTop","borderTop","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f3bfac7c.chunk.js","sourcesContent":["import React from \"react\";\nimport Card from '@material-ui/core/Card';\nimport \"./row.css\";\n\nconst Row = card => (\n    <Card\n        raised={true}\n        key={card.id}\n        className=\"card\"\n    >\n        <img\n            src={`imgs/${card.image}`}\n            alt={card.name}\n            className=\"card-image\"\n            onClick={card.handleClick}\n            id={card.id}\n        />\n    </Card>\n)\n\nexport default Row;","import React from \"react\";\nimport BottomNavigation from \"@material-ui/core/BottomNavigation\";\nimport \"./BottomBar.css\"\n\nconst BottomBar = props => (\n    <BottomNavigation {...props}>\n        {props.children}\n    </BottomNavigation>\n)\n\nexport default BottomBar;","import React, { Component } from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport \"./App.css\";\nimport images from \"./images.json\";\nimport Row from \"./Components/row/row.js\";\nimport BottomNav from \"./Components/BottomBar\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cards: images,\n      score: 0,\n      topScore: 0,\n      clicked: Array(12).fill(false)\n    };\n  }\n\n  // shuffle cards, update state\n  shuffle = () => {\n    let c = this.state.cards;\n    for (let i = c.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [c[i], c[j]] = [c[j], c[i]];\n    }\n    this.setState({\n      cards: [...c]\n    })\n  }\n  // Checking for an id\n  findId = id => {\n    return this.state.clicked.find(elem => {\n      return elem === id && true;\n    });\n  }\n  // Return the i of where the first null(empty space in clicked array) is found\n  returnFirstNull = () => {\n    return this.state.clicked.indexOf(false);\n  }\n  // Insert id into clicked array\n  insertId = (id, index) => {\n    this.setState({\n      clicked: this.state.clicked.map((elem, i) => {\n        return i === index ? id : elem;\n      })\n    });\n  }\n  // Clear clicked array\n  emptyClicked = () => {\n    this.setState({\n      clicked: Array(12).fill(false)\n    });\n  }\n  // Reset the score\n  resetScoreZero = () => {\n    this.setState({\n      score: 0\n    });\n  }\n  // Increment both the scores (setState is async...)\n  incrementBothScores = () => {\n    this.setState({\n      score: this.state.score + 1,\n      topScore: this.state.topScore + 1\n    });\n  }\n  // increment just the score\n  incrementScore = () => {\n    this.setState({\n      score: this.state.score + 1\n    });\n  }\n  // Main game logic here\n  handleClick = event => {\n    const id = event.target.id;\n    if (this.findId(id) !== undefined) {\n      // It has already been clicked!\n      alert(\"Loserrrr :'[ \");\n      // Reset the counters...\n      this.emptyClicked();\n      this.resetScoreZero();\n      // reshuffle\n      this.shuffle();\n    }\n    else {\n      // Not already clicked...\n      // Put the id in the clicked array\n      this.insertId(id, this.returnFirstNull());\n      // Is the top score bigger than the score?\n      if (this.state.topScore > this.state.score) {\n        // Update only the score\n        this.incrementScore();\n      }\n      else {\n        // Update both because they're the same\n        this.incrementBothScores();\n      }\n      // Shuffle the array\n      this.shuffle();\n      // Check for win\n      if (this.returnFirstNull() === 11) {\n        // You win! Reset stuff\n        alert(\"Champion!! ᕦ(ò_óˇ) \");\n        this.emptyClicked();\n        this.resetScoreZero();\n      }\n    }\n  }\n\n  render() {\n\n    return (\n      <>\n        <AppBar position=\"fixed\" color=\"secondary\">\n          <nav className=\"navbar navbar-default myNavColor\">\n            <div className=\"container-fluid\">\n              <div className=\"navbar-header\">\n                <h2 className=\"whiteText impactFont\">Puppy Time</h2>\n              </div>\n\n              <ul className=\"nav navbar-nav whiteText\">\n                <li>\n                  <h4>Current Score: {this.state.score} || High Score: {this.state.topScore}</h4>\n                </li>\n              </ul>\n            </div>\n          </nav>\n        </AppBar>\n        <div id=\"main-content\" className=\"container\">\n          <div className=\"row\">\n            {\n              this.state.cards.map((card, i) => (\n                i < 4 && <Row {...card} handleClick={this.handleClick} key={i} />\n              ))\n            }\n          </div>\n          <div className=\"row\">\n            {\n              this.state.cards.map((card, i) => (\n                i > 3 && i < 8 && <Row {...card} handleClick={this.handleClick} key={i} />\n              ))\n            }\n          </div>\n          <div className=\"row\">\n            {\n              this.state.cards.map((card, i) => (\n                i > 7 && <Row {...card} handleClick={this.handleClick} key={i} />\n              ))\n            }\n          </div>\n        </div>\n        <BottomNav style={{ background: \"#FFFFFF\", marginTop: \"17.5px\", paddingTop: \"15px\", borderTop: \"2.5px solid slategray\" }}>\n\n        </BottomNav>\n\n      </>\n    );\n  }\n\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}